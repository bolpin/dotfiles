# Command Enhancements

# NAVIGATION
alias got='cd ~/rails/tmsfleet/;rvm ruby-1.8.6-head@fmsgemset'

# alias startpostgres='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
# alias stoppostgres='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
alias pgs='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias pgq='pg_ctl -D /usr/local/var/postgres stop -s -m fast'

alias sshfmsstaging='ssh -i ~/.ec2/august.pem ubuntu@ec2-204-236-157-48.us-west-1.compute.amazonaws.com'
alias sshfms='ssh -i ~/.ec2/fms.pem ubuntu@ec2-184-72-1-254.us-west-1.compute.amazonaws.com'
alias sshf='ssh -i ~/.ec2/sti_key.pem ec2-user@ec2-107-21-172-238.compute-1.amazonaws.com'
#Ubuntu CAMS
alias sshcams='ssh -i ~/.ec2/sti_key.pem ubuntu@ec2-174-129-51-175.compute-1.amazonaws.com' 
alias sshec='ssh -i ~/.ec2/bolpin.pem ec2-user@107.20.196.55'

#MySQL
alias my="mysql -u root -p -D cams_dev" 
# alias stopmysql='launchctl unload -w /usr/local/Cellar/mysql/5.1.51/com.mysql.mysqld.plist'
# alias startmysql='cd /usr/local/Cellar/mysql/5.1.51 ; /usr/local/Cellar/mysql/5.1.51/bin/mysqld_safe &'
# alias testmysql='cd /usr/local/Cellar/mysql/5.1.51/mysql-test ; perl mysql-test-run.pl'
alias startmysql="/Library/StartupItems/MySQLCOM/MySQLCOM start"
alias stopmysql="/Library/StartupItems/MySQLCOM/MySQLCOM stop"

# Utility
alias reload='source ~/bin/dotfiles/bash/aliases'
alias ea='gvim ~/bin/dotfiles/bash/aliases && reload' # Edit aliases
alias ee="gvim ~/bin/dotfiles/bash/env"

# Common
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() { 
    cd $1; ls 
}
alias cls='clear; ls'
alias h='history'
alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias md='mkdir -p'
alias s='cd ..'   # up one dir

function take() { 
  mkdir -p "$1"
  cd "$1" 
}

alias e='exit'
alias k9="killall -9"
function killnamed () { 
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill 
}
function zipr() {
  zip -r $1.zip $1
}

# Finder
alias o='open . &'
alias ff='open -a Firefox'

# General code

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# Git
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -v -a'
# Commit pending changes and quote all args as message
function gg() { 
    git commit -v -a -m "$*"
}
alias g='git status'
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff master'
alias gl='git pull'
alias gnp="git-notpushed"
alias gp='git push'
alias gst='git status'
alias gt='git status'
alias eg='gvim .git/config'
# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() { 
  git branch --track $2 $1/$2 && git checkout $2 
}
# Quickly clobber a file and checkout
function grf() { 
  rm $1
  git checkout $1 
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

# Text editing
# Regenerate TAGS file from file arguments
function ct() {
  rm -f TAGS
  etags --append --output=TAGS $*
}

alias gvim='mvim'
alias vi='mvim --remote-silent'

# Ruby
alias r="rake"

# Rails
alias rp='touch tmp/restart.txt'
alias sc='./script/console'
alias sg='./script/generate'
alias sp='./script/plugin'
alias ss='./script/server'
alias tl='tail -f log/*.log'

# TDD / BDD
alias aa='autotest'
alias aaf='autotest -f' # Don't run all at start
alias aas="./script/autospec"


# get stats on most heavily used commands (copy to the command line and run)
#history | awk '{a[$2]++}END{for(i in a){print a[i] " "  i}}' | sort -rn | head

# Setup a tunnel
function haproxyssh() { 
  ssh -L7997:127.0.0.1:7997 deploy@$1.com 
}

# Syntax check Javascript
function jsc() { 
  jsl -conf /etc/jsl/jsl.conf -process $1 
}

function aiff2mp3() { 
  lame -h -V 0 $1.aif $1.mp3 
}
function wav2mp3() { 
  lame -h -V 0 $1.wav $1.mp3 
}


# XCode
# Analyze release build
alias sx="xcodebuild clean && ~/src/checker-0.146/scan-build -k -V xcodebuild"
# Analyze test build
alias sxt="xcodebuild -target Test clean && ~/src/checker-0.146/scan-build -k -V xcodebuild -target Test"
# Call with -target Foo
function sxx() { 
  xcodebuild $* clean && ~/src/checker-0.146/scan-build -k -V xcodebuild $* 
}

alias ox="open *.xcodeproj"

# Nginx
function nginx_stop() {
    ps ax | grep nginx | cut -d " " -f 1 | xargs sudo kill -9
}
function nginx_start() {
    sudo /opt/nginx/sbin/nginx
}

# From http://github.com/suztomo/dotfiles
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}

